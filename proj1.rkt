#lang racket
(require plot)

(define ls (list))
(define ls1 (list))
(define ls2 (list))
(define angle 0.0)
(define (minusA c)(- angle c))
(define (plusA c)(+ angle c))
(define plotpoints (list))
(define (point x y) (list x y))
(define (getX point) (car point))
(define (getY point) (car (cdr point)))

(define create (lambda (lst temp)
(when (equal? (empty? lst) #f)
(when ( equal? (first lst) 0)
(set! temp (cons 0 temp))
(set! temp (cons -1 temp))
(set! temp (cons 0 temp))
(set! temp (cons 1 temp))
(set! temp (cons 1 temp))
(set! temp (cons 0 temp))
(set! temp (cons 1 temp))
(set! temp (cons 0 temp))
(set! temp (cons -1 temp))
(set! temp (cons 0 temp))
(set! temp (cons -1 temp))
(set! temp (cons 0 temp))
)
(when not( equal? (first lst) 0)
(set! temp (cons (first lst) temp)))
(create (rest lst) temp))))

(define (createls ls)
(when (equal? (empty? ls) #f)
(when ( equal? (first ls) 0)
(set! ls1 (cons 0 ls1))
(set! ls1 (cons -1 ls1))
(set! ls1 (cons 0 ls1))
(set! ls1 (cons 1 ls1))
(set! ls1 (cons 1 ls1))
(set! ls1 (cons 0 ls1))
(set! ls1 (cons 1 ls1))
(set! ls1 (cons 0 ls1))
(set! ls1 (cons -1 ls1))
(set! ls1 (cons 0 ls1))
(set! ls1 (cons -1 ls1))
(set! ls1 (cons 0 ls1))
)
(when not( equal? (first ls) 0)
(set! ls1 (cons (first ls) ls1)))
(createls (rest ls))))

(define (createlst ls)
(when (equal? (empty? ls) #f)
(when ( equal? (first ls) 0)
(set! ls2 (cons 0 ls2))
(set! ls2 (cons -1 ls2))
(set! ls2 (cons 0 ls2))
(set! ls2 (cons 1 ls2))
(set! ls2 (cons 1 ls2))
(set! ls2 (cons 0 ls2))
(set! ls2 (cons 1 ls2))
(set! ls2 (cons 0 ls2))
(set! ls2 (cons -1 ls2))
(set! ls2 (cons 0 ls2))
(set! ls2 (cons -1 ls2))
(set! ls2 (cons 0 ls2))
)
(when not( equal? (first ls) 0)
(set! ls2 (cons (first ls) ls2)))
(createlst (rest ls))))

(define (outputListData list)
  (cond
    [(null? list) #f]            
    [else (printf "~s\n" (first list))    
          (outputListData (rest list))]))

(define getPoints(lambda(qlst prevp angle) 
(when (equal? (null? qlst) #f)
(when (equal? (first qlst) 0)
(set! plotpoints (cons (point (+(getX prevp) (cos angle)) (+(getY prevp) (sin angle))) plotpoints)))
(when (equal? (first qlst) 1)
(set! angle (- angle (* (/ 72 180) pi)))) 
(when (equal? (first qlst) -1)
(set! angle (+ angle (* (/ 72 180) pi))))
(getPoints (rest qlst) (point (+(getX prevp) (cos angle)) (+(getY prevp) (sin angle))) angle)))) 

(define init (lambda(x1 x2 x3 x4 x5 x6 x7 x8 x9)
(set! ls (cons x1 ls))
(set! ls (cons x2 ls))
(set! ls (cons x3 ls))
(set! ls (cons x4 ls))
(set! ls (cons x5 ls))
(set! ls (cons x6 ls))
(set! ls (cons x7 ls))
(set! ls (cons x8 ls))
(set! ls (cons x9 ls))

(createls ls)
(createlst ls1)
(set! plotpoints (cons (point 0 0) plotpoints)) 
(getPoints ls2 (point 0 0) (* 0 pi))
(outputListData plotpoints)
(plot (lines plotpoints))
))

(init 0 -1 0 -1 0 -1 0 -1 0)